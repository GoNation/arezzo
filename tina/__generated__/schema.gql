# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  theme(relativePath: String): Theme!
  themeConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ThemeFilter): ThemeConnection!
  siteConfig(relativePath: String): SiteConfig!
  siteConfigConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SiteConfigFilter): SiteConfigConnection!
  pageLayouts(relativePath: String): PageLayouts!
  pageLayoutsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageLayoutsFilter): PageLayoutsConnection!
}

input DocumentFilter {
  theme: ThemeFilter
  siteConfig: SiteConfigFilter
  pageLayouts: PageLayoutsFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Theme | SiteConfig | PageLayouts | Folder

type ThemeButtonVariants {
  variantName: String
  bg: String
  color: String
  borderColor: String
}

type ThemeButton {
  fontWeight: String
  textTransform: String
  variants: ThemeButtonVariants
}

type ThemeColors {
  colorName: String
  shade50: String
  shade900: String
}

type ThemeTypography {
  fontFamily: String
}

type Theme implements Node & Document {
  Button: ThemeButton
  colors: ThemeColors
  typography: ThemeTypography
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ThemeButtonVariantsFilter {
  variantName: StringFilter
  bg: StringFilter
  color: StringFilter
  borderColor: StringFilter
}

input ThemeButtonFilter {
  fontWeight: StringFilter
  textTransform: StringFilter
  variants: ThemeButtonVariantsFilter
}

input ThemeColorsFilter {
  colorName: StringFilter
  shade50: StringFilter
  shade900: StringFilter
}

input ThemeTypographyFilter {
  fontFamily: StringFilter
}

input ThemeFilter {
  Button: ThemeButtonFilter
  colors: ThemeColorsFilter
  typography: ThemeTypographyFilter
}

type ThemeConnectionEdges {
  cursor: String!
  node: Theme
}

type ThemeConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ThemeConnectionEdges]
}

type SiteConfigRoutes {
  name: String
}

type SiteConfig implements Node & Document {
  businessId: String
  poweredId: String
  routes: [SiteConfigRoutes]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input SiteConfigRoutesFilter {
  name: StringFilter
}

input SiteConfigFilter {
  businessId: StringFilter
  poweredId: StringFilter
  routes: SiteConfigRoutesFilter
}

type SiteConfigConnectionEdges {
  cursor: String!
  node: SiteConfig
}

type SiteConfigConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SiteConfigConnectionEdges]
}

type PageLayoutsComponentsHero {
  storyName: String
  showLogo: Boolean
  shouldShowPhoneAndDirections: Boolean
}

type PageLayoutsComponentsSideBySide {
  storyName: String
  reversed: Boolean
}

type PageLayoutsComponentsExpandableShout {
  backgroundImage: String
  customBackground: String
  backgroundColor: String
}

type PageLayoutsComponentsLargeContentContainer {
  storyName: String
  position: String
  backgroundColor: String
}

union PageLayoutsComponents = PageLayoutsComponentsHero | PageLayoutsComponentsSideBySide | PageLayoutsComponentsExpandableShout | PageLayoutsComponentsLargeContentContainer

type PageLayouts implements Node & Document {
  components: [PageLayoutsComponents]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input PageLayoutsComponentsHeroFilter {
  storyName: StringFilter
  showLogo: BooleanFilter
  shouldShowPhoneAndDirections: BooleanFilter
}

input PageLayoutsComponentsSideBySideFilter {
  storyName: StringFilter
  reversed: BooleanFilter
}

input PageLayoutsComponentsExpandableShoutFilter {
  backgroundImage: StringFilter
  customBackground: StringFilter
  backgroundColor: StringFilter
}

input PageLayoutsComponentsLargeContentContainerFilter {
  storyName: StringFilter
  position: StringFilter
  backgroundColor: StringFilter
}

input PageLayoutsComponentsFilter {
  hero: PageLayoutsComponentsHeroFilter
  sideBySide: PageLayoutsComponentsSideBySideFilter
  expandableShout: PageLayoutsComponentsExpandableShoutFilter
  largeContentContainer: PageLayoutsComponentsLargeContentContainerFilter
}

input PageLayoutsFilter {
  components: PageLayoutsComponentsFilter
}

type PageLayoutsConnectionEdges {
  cursor: String!
  node: PageLayouts
}

type PageLayoutsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageLayoutsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateTheme(relativePath: String!, params: ThemeMutation!): Theme!
  createTheme(relativePath: String!, params: ThemeMutation!): Theme!
  updateSiteConfig(relativePath: String!, params: SiteConfigMutation!): SiteConfig!
  createSiteConfig(relativePath: String!, params: SiteConfigMutation!): SiteConfig!
  updatePageLayouts(relativePath: String!, params: PageLayoutsMutation!): PageLayouts!
  createPageLayouts(relativePath: String!, params: PageLayoutsMutation!): PageLayouts!
}

input DocumentUpdateMutation {
  theme: ThemeMutation
  siteConfig: SiteConfigMutation
  pageLayouts: PageLayoutsMutation
  relativePath: String
}

input DocumentMutation {
  theme: ThemeMutation
  siteConfig: SiteConfigMutation
  pageLayouts: PageLayoutsMutation
}

input ThemeButtonVariantsMutation {
  variantName: String
  bg: String
  color: String
  borderColor: String
}

input ThemeButtonMutation {
  fontWeight: String
  textTransform: String
  variants: ThemeButtonVariantsMutation
}

input ThemeColorsMutation {
  colorName: String
  shade50: String
  shade900: String
}

input ThemeTypographyMutation {
  fontFamily: String
}

input ThemeMutation {
  Button: ThemeButtonMutation
  colors: ThemeColorsMutation
  typography: ThemeTypographyMutation
}

input SiteConfigRoutesMutation {
  name: String
}

input SiteConfigMutation {
  businessId: String
  poweredId: String
  routes: [SiteConfigRoutesMutation]
}

input PageLayoutsComponentsHeroMutation {
  storyName: String
  showLogo: Boolean
  shouldShowPhoneAndDirections: Boolean
}

input PageLayoutsComponentsSideBySideMutation {
  storyName: String
  reversed: Boolean
}

input PageLayoutsComponentsExpandableShoutMutation {
  backgroundImage: String
  customBackground: String
  backgroundColor: String
}

input PageLayoutsComponentsLargeContentContainerMutation {
  storyName: String
  position: String
  backgroundColor: String
}

input PageLayoutsComponentsMutation {
  hero: PageLayoutsComponentsHeroMutation
  sideBySide: PageLayoutsComponentsSideBySideMutation
  expandableShout: PageLayoutsComponentsExpandableShoutMutation
  largeContentContainer: PageLayoutsComponentsLargeContentContainerMutation
}

input PageLayoutsMutation {
  components: [PageLayoutsComponentsMutation]
}

schema {
  query: Query
  mutation: Mutation
}
