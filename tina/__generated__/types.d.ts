//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  theme: Theme;
  themeConnection: ThemeConnection;
  siteConfig: SiteConfig;
  siteConfigConnection: SiteConfigConnection;
  pageLayouts: PageLayouts;
  pageLayoutsConnection: PageLayoutsConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryThemeArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryThemeConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ThemeFilter>;
};


export type QuerySiteConfigArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QuerySiteConfigConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SiteConfigFilter>;
};


export type QueryPageLayoutsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPageLayoutsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PageLayoutsFilter>;
};

export type DocumentFilter = {
  theme?: InputMaybe<ThemeFilter>;
  siteConfig?: InputMaybe<SiteConfigFilter>;
  pageLayouts?: InputMaybe<PageLayoutsFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Theme | SiteConfig | PageLayouts | Folder;

export type ThemeButtonVariants = {
  __typename?: 'ThemeButtonVariants';
  variantName?: Maybe<Scalars['String']['output']>;
  bg?: Maybe<Scalars['String']['output']>;
  color?: Maybe<Scalars['String']['output']>;
  borderColor?: Maybe<Scalars['String']['output']>;
};

export type ThemeButton = {
  __typename?: 'ThemeButton';
  fontWeight?: Maybe<Scalars['String']['output']>;
  textTransform?: Maybe<Scalars['String']['output']>;
  variants?: Maybe<ThemeButtonVariants>;
};

export type ThemeColors = {
  __typename?: 'ThemeColors';
  colorName?: Maybe<Scalars['String']['output']>;
  shade50?: Maybe<Scalars['String']['output']>;
  shade900?: Maybe<Scalars['String']['output']>;
};

export type ThemeTypography = {
  __typename?: 'ThemeTypography';
  fontFamily?: Maybe<Scalars['String']['output']>;
};

export type Theme = Node & Document & {
  __typename?: 'Theme';
  Button?: Maybe<ThemeButton>;
  colors?: Maybe<ThemeColors>;
  typography?: Maybe<ThemeTypography>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type ThemeButtonVariantsFilter = {
  variantName?: InputMaybe<StringFilter>;
  bg?: InputMaybe<StringFilter>;
  color?: InputMaybe<StringFilter>;
  borderColor?: InputMaybe<StringFilter>;
};

export type ThemeButtonFilter = {
  fontWeight?: InputMaybe<StringFilter>;
  textTransform?: InputMaybe<StringFilter>;
  variants?: InputMaybe<ThemeButtonVariantsFilter>;
};

export type ThemeColorsFilter = {
  colorName?: InputMaybe<StringFilter>;
  shade50?: InputMaybe<StringFilter>;
  shade900?: InputMaybe<StringFilter>;
};

export type ThemeTypographyFilter = {
  fontFamily?: InputMaybe<StringFilter>;
};

export type ThemeFilter = {
  Button?: InputMaybe<ThemeButtonFilter>;
  colors?: InputMaybe<ThemeColorsFilter>;
  typography?: InputMaybe<ThemeTypographyFilter>;
};

export type ThemeConnectionEdges = {
  __typename?: 'ThemeConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Theme>;
};

export type ThemeConnection = Connection & {
  __typename?: 'ThemeConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ThemeConnectionEdges>>>;
};

export type SiteConfigRoutes = {
  __typename?: 'SiteConfigRoutes';
  name?: Maybe<Scalars['String']['output']>;
};

export type SiteConfig = Node & Document & {
  __typename?: 'SiteConfig';
  businessId?: Maybe<Scalars['String']['output']>;
  poweredId?: Maybe<Scalars['String']['output']>;
  routes?: Maybe<Array<Maybe<SiteConfigRoutes>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type SiteConfigRoutesFilter = {
  name?: InputMaybe<StringFilter>;
};

export type SiteConfigFilter = {
  businessId?: InputMaybe<StringFilter>;
  poweredId?: InputMaybe<StringFilter>;
  routes?: InputMaybe<SiteConfigRoutesFilter>;
};

export type SiteConfigConnectionEdges = {
  __typename?: 'SiteConfigConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<SiteConfig>;
};

export type SiteConfigConnection = Connection & {
  __typename?: 'SiteConfigConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<SiteConfigConnectionEdges>>>;
};

export type PageLayoutsComponentsHero = {
  __typename?: 'PageLayoutsComponentsHero';
  storyName?: Maybe<Scalars['String']['output']>;
  showLogo?: Maybe<Scalars['Boolean']['output']>;
  shouldShowPhoneAndDirections?: Maybe<Scalars['Boolean']['output']>;
};

export type PageLayoutsComponentsSideBySide = {
  __typename?: 'PageLayoutsComponentsSideBySide';
  storyName?: Maybe<Scalars['String']['output']>;
  reversed?: Maybe<Scalars['Boolean']['output']>;
};

export type PageLayoutsComponentsExpandableShout = {
  __typename?: 'PageLayoutsComponentsExpandableShout';
  backgroundImage?: Maybe<Scalars['String']['output']>;
  customBackground?: Maybe<Scalars['String']['output']>;
  backgroundColor?: Maybe<Scalars['String']['output']>;
};

export type PageLayoutsComponentsLargeContentContainer = {
  __typename?: 'PageLayoutsComponentsLargeContentContainer';
  storyName?: Maybe<Scalars['String']['output']>;
  position?: Maybe<Scalars['String']['output']>;
  backgroundColor?: Maybe<Scalars['String']['output']>;
};

export type PageLayoutsComponents = PageLayoutsComponentsHero | PageLayoutsComponentsSideBySide | PageLayoutsComponentsExpandableShout | PageLayoutsComponentsLargeContentContainer;

export type PageLayouts = Node & Document & {
  __typename?: 'PageLayouts';
  components?: Maybe<Array<Maybe<PageLayoutsComponents>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PageLayoutsComponentsHeroFilter = {
  storyName?: InputMaybe<StringFilter>;
  showLogo?: InputMaybe<BooleanFilter>;
  shouldShowPhoneAndDirections?: InputMaybe<BooleanFilter>;
};

export type PageLayoutsComponentsSideBySideFilter = {
  storyName?: InputMaybe<StringFilter>;
  reversed?: InputMaybe<BooleanFilter>;
};

export type PageLayoutsComponentsExpandableShoutFilter = {
  backgroundImage?: InputMaybe<StringFilter>;
  customBackground?: InputMaybe<StringFilter>;
  backgroundColor?: InputMaybe<StringFilter>;
};

export type PageLayoutsComponentsLargeContentContainerFilter = {
  storyName?: InputMaybe<StringFilter>;
  position?: InputMaybe<StringFilter>;
  backgroundColor?: InputMaybe<StringFilter>;
};

export type PageLayoutsComponentsFilter = {
  hero?: InputMaybe<PageLayoutsComponentsHeroFilter>;
  sideBySide?: InputMaybe<PageLayoutsComponentsSideBySideFilter>;
  expandableShout?: InputMaybe<PageLayoutsComponentsExpandableShoutFilter>;
  largeContentContainer?: InputMaybe<PageLayoutsComponentsLargeContentContainerFilter>;
};

export type PageLayoutsFilter = {
  components?: InputMaybe<PageLayoutsComponentsFilter>;
};

export type PageLayoutsConnectionEdges = {
  __typename?: 'PageLayoutsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<PageLayouts>;
};

export type PageLayoutsConnection = Connection & {
  __typename?: 'PageLayoutsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PageLayoutsConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  updateTheme: Theme;
  createTheme: Theme;
  updateSiteConfig: SiteConfig;
  createSiteConfig: SiteConfig;
  updatePageLayouts: PageLayouts;
  createPageLayouts: PageLayouts;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationUpdateThemeArgs = {
  relativePath: Scalars['String']['input'];
  params: ThemeMutation;
};


export type MutationCreateThemeArgs = {
  relativePath: Scalars['String']['input'];
  params: ThemeMutation;
};


export type MutationUpdateSiteConfigArgs = {
  relativePath: Scalars['String']['input'];
  params: SiteConfigMutation;
};


export type MutationCreateSiteConfigArgs = {
  relativePath: Scalars['String']['input'];
  params: SiteConfigMutation;
};


export type MutationUpdatePageLayoutsArgs = {
  relativePath: Scalars['String']['input'];
  params: PageLayoutsMutation;
};


export type MutationCreatePageLayoutsArgs = {
  relativePath: Scalars['String']['input'];
  params: PageLayoutsMutation;
};

export type DocumentUpdateMutation = {
  theme?: InputMaybe<ThemeMutation>;
  siteConfig?: InputMaybe<SiteConfigMutation>;
  pageLayouts?: InputMaybe<PageLayoutsMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  theme?: InputMaybe<ThemeMutation>;
  siteConfig?: InputMaybe<SiteConfigMutation>;
  pageLayouts?: InputMaybe<PageLayoutsMutation>;
};

export type ThemeButtonVariantsMutation = {
  variantName?: InputMaybe<Scalars['String']['input']>;
  bg?: InputMaybe<Scalars['String']['input']>;
  color?: InputMaybe<Scalars['String']['input']>;
  borderColor?: InputMaybe<Scalars['String']['input']>;
};

export type ThemeButtonMutation = {
  fontWeight?: InputMaybe<Scalars['String']['input']>;
  textTransform?: InputMaybe<Scalars['String']['input']>;
  variants?: InputMaybe<ThemeButtonVariantsMutation>;
};

export type ThemeColorsMutation = {
  colorName?: InputMaybe<Scalars['String']['input']>;
  shade50?: InputMaybe<Scalars['String']['input']>;
  shade900?: InputMaybe<Scalars['String']['input']>;
};

export type ThemeTypographyMutation = {
  fontFamily?: InputMaybe<Scalars['String']['input']>;
};

export type ThemeMutation = {
  Button?: InputMaybe<ThemeButtonMutation>;
  colors?: InputMaybe<ThemeColorsMutation>;
  typography?: InputMaybe<ThemeTypographyMutation>;
};

export type SiteConfigRoutesMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
};

export type SiteConfigMutation = {
  businessId?: InputMaybe<Scalars['String']['input']>;
  poweredId?: InputMaybe<Scalars['String']['input']>;
  routes?: InputMaybe<Array<InputMaybe<SiteConfigRoutesMutation>>>;
};

export type PageLayoutsComponentsHeroMutation = {
  storyName?: InputMaybe<Scalars['String']['input']>;
  showLogo?: InputMaybe<Scalars['Boolean']['input']>;
  shouldShowPhoneAndDirections?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PageLayoutsComponentsSideBySideMutation = {
  storyName?: InputMaybe<Scalars['String']['input']>;
  reversed?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PageLayoutsComponentsExpandableShoutMutation = {
  backgroundImage?: InputMaybe<Scalars['String']['input']>;
  customBackground?: InputMaybe<Scalars['String']['input']>;
  backgroundColor?: InputMaybe<Scalars['String']['input']>;
};

export type PageLayoutsComponentsLargeContentContainerMutation = {
  storyName?: InputMaybe<Scalars['String']['input']>;
  position?: InputMaybe<Scalars['String']['input']>;
  backgroundColor?: InputMaybe<Scalars['String']['input']>;
};

export type PageLayoutsComponentsMutation = {
  hero?: InputMaybe<PageLayoutsComponentsHeroMutation>;
  sideBySide?: InputMaybe<PageLayoutsComponentsSideBySideMutation>;
  expandableShout?: InputMaybe<PageLayoutsComponentsExpandableShoutMutation>;
  largeContentContainer?: InputMaybe<PageLayoutsComponentsLargeContentContainerMutation>;
};

export type PageLayoutsMutation = {
  components?: InputMaybe<Array<InputMaybe<PageLayoutsComponentsMutation>>>;
};

export type ThemePartsFragment = { __typename?: 'Theme', Button?: { __typename: 'ThemeButton', fontWeight?: string | null, textTransform?: string | null, variants?: { __typename: 'ThemeButtonVariants', variantName?: string | null, bg?: string | null, color?: string | null, borderColor?: string | null } | null } | null, colors?: { __typename: 'ThemeColors', colorName?: string | null, shade50?: string | null, shade900?: string | null } | null, typography?: { __typename: 'ThemeTypography', fontFamily?: string | null } | null };

export type SiteConfigPartsFragment = { __typename?: 'SiteConfig', businessId?: string | null, poweredId?: string | null, routes?: Array<{ __typename: 'SiteConfigRoutes', name?: string | null } | null> | null };

export type PageLayoutsPartsFragment = { __typename?: 'PageLayouts', components?: Array<{ __typename: 'PageLayoutsComponentsHero', storyName?: string | null, showLogo?: boolean | null, shouldShowPhoneAndDirections?: boolean | null } | { __typename: 'PageLayoutsComponentsSideBySide', storyName?: string | null, reversed?: boolean | null } | { __typename: 'PageLayoutsComponentsExpandableShout', backgroundImage?: string | null, customBackground?: string | null, backgroundColor?: string | null } | { __typename: 'PageLayoutsComponentsLargeContentContainer', storyName?: string | null, position?: string | null, backgroundColor?: string | null } | null> | null };

export type ThemeQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ThemeQuery = { __typename?: 'Query', theme: { __typename?: 'Theme', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, Button?: { __typename: 'ThemeButton', fontWeight?: string | null, textTransform?: string | null, variants?: { __typename: 'ThemeButtonVariants', variantName?: string | null, bg?: string | null, color?: string | null, borderColor?: string | null } | null } | null, colors?: { __typename: 'ThemeColors', colorName?: string | null, shade50?: string | null, shade900?: string | null } | null, typography?: { __typename: 'ThemeTypography', fontFamily?: string | null } | null } };

export type ThemeConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ThemeFilter>;
}>;


export type ThemeConnectionQuery = { __typename?: 'Query', themeConnection: { __typename?: 'ThemeConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ThemeConnectionEdges', cursor: string, node?: { __typename?: 'Theme', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, Button?: { __typename: 'ThemeButton', fontWeight?: string | null, textTransform?: string | null, variants?: { __typename: 'ThemeButtonVariants', variantName?: string | null, bg?: string | null, color?: string | null, borderColor?: string | null } | null } | null, colors?: { __typename: 'ThemeColors', colorName?: string | null, shade50?: string | null, shade900?: string | null } | null, typography?: { __typename: 'ThemeTypography', fontFamily?: string | null } | null } | null } | null> | null } };

export type SiteConfigQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type SiteConfigQuery = { __typename?: 'Query', siteConfig: { __typename?: 'SiteConfig', id: string, businessId?: string | null, poweredId?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, routes?: Array<{ __typename: 'SiteConfigRoutes', name?: string | null } | null> | null } };

export type SiteConfigConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SiteConfigFilter>;
}>;


export type SiteConfigConnectionQuery = { __typename?: 'Query', siteConfigConnection: { __typename?: 'SiteConfigConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'SiteConfigConnectionEdges', cursor: string, node?: { __typename?: 'SiteConfig', id: string, businessId?: string | null, poweredId?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, routes?: Array<{ __typename: 'SiteConfigRoutes', name?: string | null } | null> | null } | null } | null> | null } };

export type PageLayoutsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PageLayoutsQuery = { __typename?: 'Query', pageLayouts: { __typename?: 'PageLayouts', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, components?: Array<{ __typename: 'PageLayoutsComponentsHero', storyName?: string | null, showLogo?: boolean | null, shouldShowPhoneAndDirections?: boolean | null } | { __typename: 'PageLayoutsComponentsSideBySide', storyName?: string | null, reversed?: boolean | null } | { __typename: 'PageLayoutsComponentsExpandableShout', backgroundImage?: string | null, customBackground?: string | null, backgroundColor?: string | null } | { __typename: 'PageLayoutsComponentsLargeContentContainer', storyName?: string | null, position?: string | null, backgroundColor?: string | null } | null> | null } };

export type PageLayoutsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PageLayoutsFilter>;
}>;


export type PageLayoutsConnectionQuery = { __typename?: 'Query', pageLayoutsConnection: { __typename?: 'PageLayoutsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PageLayoutsConnectionEdges', cursor: string, node?: { __typename?: 'PageLayouts', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, components?: Array<{ __typename: 'PageLayoutsComponentsHero', storyName?: string | null, showLogo?: boolean | null, shouldShowPhoneAndDirections?: boolean | null } | { __typename: 'PageLayoutsComponentsSideBySide', storyName?: string | null, reversed?: boolean | null } | { __typename: 'PageLayoutsComponentsExpandableShout', backgroundImage?: string | null, customBackground?: string | null, backgroundColor?: string | null } | { __typename: 'PageLayoutsComponentsLargeContentContainer', storyName?: string | null, position?: string | null, backgroundColor?: string | null } | null> | null } | null } | null> | null } };

export const ThemePartsFragmentDoc = gql`
    fragment ThemeParts on Theme {
  Button {
    __typename
    fontWeight
    textTransform
    variants {
      __typename
      variantName
      bg
      color
      borderColor
    }
  }
  colors {
    __typename
    colorName
    shade50
    shade900
  }
  typography {
    __typename
    fontFamily
  }
}
    `;
export const SiteConfigPartsFragmentDoc = gql`
    fragment SiteConfigParts on SiteConfig {
  businessId
  poweredId
  routes {
    __typename
    name
  }
}
    `;
export const PageLayoutsPartsFragmentDoc = gql`
    fragment PageLayoutsParts on PageLayouts {
  components {
    __typename
    ... on PageLayoutsComponentsHero {
      storyName
      showLogo
      shouldShowPhoneAndDirections
    }
    ... on PageLayoutsComponentsSideBySide {
      storyName
      reversed
    }
    ... on PageLayoutsComponentsExpandableShout {
      backgroundImage
      customBackground
      backgroundColor
    }
    ... on PageLayoutsComponentsLargeContentContainer {
      storyName
      position
      backgroundColor
    }
  }
}
    `;
export const ThemeDocument = gql`
    query theme($relativePath: String!) {
  theme(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ThemeParts
  }
}
    ${ThemePartsFragmentDoc}`;
export const ThemeConnectionDocument = gql`
    query themeConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ThemeFilter) {
  themeConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ThemeParts
      }
    }
  }
}
    ${ThemePartsFragmentDoc}`;
export const SiteConfigDocument = gql`
    query siteConfig($relativePath: String!) {
  siteConfig(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...SiteConfigParts
  }
}
    ${SiteConfigPartsFragmentDoc}`;
export const SiteConfigConnectionDocument = gql`
    query siteConfigConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: SiteConfigFilter) {
  siteConfigConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...SiteConfigParts
      }
    }
  }
}
    ${SiteConfigPartsFragmentDoc}`;
export const PageLayoutsDocument = gql`
    query pageLayouts($relativePath: String!) {
  pageLayouts(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PageLayoutsParts
  }
}
    ${PageLayoutsPartsFragmentDoc}`;
export const PageLayoutsConnectionDocument = gql`
    query pageLayoutsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PageLayoutsFilter) {
  pageLayoutsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PageLayoutsParts
      }
    }
  }
}
    ${PageLayoutsPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      theme(variables: ThemeQueryVariables, options?: C): Promise<{data: ThemeQuery, variables: ThemeQueryVariables, query: string}> {
        return requester<{data: ThemeQuery, variables: ThemeQueryVariables, query: string}, ThemeQueryVariables>(ThemeDocument, variables, options);
      },
    themeConnection(variables?: ThemeConnectionQueryVariables, options?: C): Promise<{data: ThemeConnectionQuery, variables: ThemeConnectionQueryVariables, query: string}> {
        return requester<{data: ThemeConnectionQuery, variables: ThemeConnectionQueryVariables, query: string}, ThemeConnectionQueryVariables>(ThemeConnectionDocument, variables, options);
      },
    siteConfig(variables: SiteConfigQueryVariables, options?: C): Promise<{data: SiteConfigQuery, variables: SiteConfigQueryVariables, query: string}> {
        return requester<{data: SiteConfigQuery, variables: SiteConfigQueryVariables, query: string}, SiteConfigQueryVariables>(SiteConfigDocument, variables, options);
      },
    siteConfigConnection(variables?: SiteConfigConnectionQueryVariables, options?: C): Promise<{data: SiteConfigConnectionQuery, variables: SiteConfigConnectionQueryVariables, query: string}> {
        return requester<{data: SiteConfigConnectionQuery, variables: SiteConfigConnectionQueryVariables, query: string}, SiteConfigConnectionQueryVariables>(SiteConfigConnectionDocument, variables, options);
      },
    pageLayouts(variables: PageLayoutsQueryVariables, options?: C): Promise<{data: PageLayoutsQuery, variables: PageLayoutsQueryVariables, query: string}> {
        return requester<{data: PageLayoutsQuery, variables: PageLayoutsQueryVariables, query: string}, PageLayoutsQueryVariables>(PageLayoutsDocument, variables, options);
      },
    pageLayoutsConnection(variables?: PageLayoutsConnectionQueryVariables, options?: C): Promise<{data: PageLayoutsConnectionQuery, variables: PageLayoutsConnectionQueryVariables, query: string}> {
        return requester<{data: PageLayoutsConnectionQuery, variables: PageLayoutsConnectionQueryVariables, query: string}, PageLayoutsConnectionQueryVariables>(PageLayoutsConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
  options?: { branch?: string }
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: { branch?: string },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    })

    return { data: data?.data, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
  options?: {
    branch?: string
  }
) => {
  const requester = generateRequester(client, options)
  return getSdk(requester)
}

  